package eu.javaspecialists.tjsn.issue095;

import java.io.*;
import java.util.*;

public class XMLFileConfiguration extends AbstractConfiguration {
    private final File file;
    private long lastModified = 0;

    public XMLFileConfiguration(Properties defaults, String filename, int period)
            throws IOException {
        super(period);
        setAllProperties(defaults);
        file = new File(filename);
        if (!file.exists()) {
            storeProperties();
        }
        loadProperties();
    }

    private void loadProperties() throws IOException {
        Properties properties = new Properties();
        properties.loadFromXML(new FileInputStream(file));
        setAllProperties(properties);
    }

    private void setAllProperties(Properties properties) {
        for (Map.Entry<Object, Object> entry : properties.entrySet()) {
            setProperty((String) entry.getKey(), entry.getValue());
        }
    }

    public void storeProperties() {
        Properties properties = new Properties();
        for (Map.Entry<String, Object> entry : getAllProperties()) {
            properties.put(entry.getKey(), entry.getValue());
        }
        try {
            properties.storeToXML(new FileOutputStream(file),
                    "Generated by XMLFileConfiguration");
        } catch (IOException e) {
            Exceptions.throwException(e);
        }
    }

    protected void checkForPropertyChanges() {
        if (lastModified != file.lastModified()) {
            try {
                lastModified = file.lastModified();
                loadProperties();
            } catch (IOException e) {
                Exceptions.throwException(e);
            }
        }
    }
}
